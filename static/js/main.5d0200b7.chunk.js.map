{"version":3,"sources":["components/Charts/LineChart.js","components/Charts/BarChart.js","components/Dropdown/Dropdown.js","components/Cards/WorldwideStats.js","components/Cards/CountryCards.js","api/Api.js","App.js","serviceWorker.js","index.js"],"names":["currentChart","data","chartRef","useRef","useEffect","destroy","JSON","stringify","cvs","current","getContext","country","labels","map","currMonthData","currDate","Date","Country","toDateString","casesConfirmedData","Cases","Chart","type","datasets","label","backgroundColor","pointBackgroundColor","borderColor","borderWidth","options","animation","easing","title","display","text","fontSize","position","layout","padding","left","right","createChart","className","ref","countryData","parse","sessionStorage","getItem","Countries","find","countryStats","TotalConfirmed","TotalRecovered","TotalDeaths","setCountry","useState","disabled","setDisabled","selectRef","onChange","e","elem","element","target","value","console","log","slug","setTimeout","opt","idx","key","CircularProgress","useStyles","makeStyles","boxStyles","margin","justifyContent","alignItems","cardStyles","width","height","color","confirmedCard","border","recoveredCard","deathsCard","summaryData","classes","Global","Box","Card","CardContent","Typography","variant","undefined","cData","Slug","BASE_URL","getSummaryData","a","url","fetch","json","setItem","getAllCountriesAndCode","getConfirmedCasesByCountry","dates","Promise","all","slice","length","date","nextDate","setDate","getDate","toISOString","then","res","temp","getAllDatesInRange","endDate","listOfDates","currentDate","setUTCDate","setUTCHours","setUTCMinutes","setUTCSeconds","i","push","setUTCMonth","getUTCMonth","reverse","dropdownContainerStyles","flexDirection","titleStyles","App","setSummaryData","isSummaryLoaded","setIsSummaryLoaded","setData","wrapperFunc","now","WorldwideStats","CountryCards","LineChart","BarChart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d0200b7.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js\";\nimport \"./Charts.css\";\n\n//Global variable to store the chart so that we can destory it when updating\nlet currentChart;\n\nexport default ({ data }) => {\n  // Created the reference to the canvas that will hold the chart\n  let chartRef = useRef();\n\n  // console.log(data);\n  const createChart = (data) => {\n    const cvs = chartRef.current.getContext(\"2d\");\n    //Return the effect early when the data is empty\n    if (JSON.stringify(data) === \"[]\") {\n      return;\n    }\n    //Get the country for this data\n    let country;\n\n    //Get labels for the graph\n    const labels = [...data].map((currMonthData) => {\n      // console.log(currMonthData[0]);\n      const currDate = currMonthData[0].Date;\n      country = currMonthData[0].Country;\n      // console.log(new Date(currDate).toDateString());\n      return new Date(currDate).toDateString();\n    });\n\n    // Get the appropriate cases confirmed data\n    const casesConfirmedData = [...data].map((currMonthData) => {\n      const { Cases } = currMonthData[0];\n      return Cases;\n    });\n\n    currentChart = new Chart(cvs, {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"# of Covid-19 Occurences\",\n            data: casesConfirmedData,\n            backgroundColor: [\"rgba(123, 79, 52, 0.4)\"],\n            pointBackgroundColor: [\n              \"rgba(255, 99, 132, 1)\",\n              \"rgba(54, 162, 235, 1)\",\n              \"rgba(255, 206, 86, 1)\",\n              \"rgba(75, 192, 192, 1)\",\n              \"rgba(153, 102, 255, 1)\",\n              \"rgba(255, 159, 64, 1)\",\n              \"rgba(255, 99, 132, 1)\",\n              \"rgba(54, 162, 235, 1)\",\n            ],\n            borderColor: [\"rgba(244, 244, 244, 0.4)\"],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        animation: {\n          easing: \"easeOutQuart\",\n        },\n        title: {\n          display: true,\n          text: country,\n          fontSize: 18,\n          position: \"left\",\n        },\n        layout: {\n          padding: {\n            left: 25,\n            right: 25,\n          },\n        },\n      },\n    });\n  };\n\n  // On each re-render destroy the chart and repaint it\n  useEffect(() => {\n    if (typeof currentChart !== \"undefined\") {\n      currentChart.destroy();\n    }\n    if (JSON.stringify(data) !== \"[]\") {\n      createChart(data);\n    }\n  });\n\n  return <canvas className=\"ctx\" ref={chartRef}></canvas>;\n};\n","import React, { useRef, useEffect } from \"react\";\nimport Chart from \"chart.js\";\nimport \"./Charts.css\";\n\n//Global variable to store the chart so that we can destory it when updating\nlet currentChart;\n\nexport default ({ data }) => {\n  //Reference to the chart\n  const chartRef = useRef();\n\n  //This function creates the chart using the data and setting the new chart to currentChart\n  const createChart = (data) => {\n    const cvs = chartRef.current.getContext(\"2d\");\n\n    //Return the effect early when the data is empty\n    if (JSON.stringify(data) === \"[]\") {\n      return;\n    }\n    // get the country\n    let country;\n\n    [...data].map((currMonthData) => {\n      country = currMonthData[0].Country;\n    });\n\n    //Get the summaryData\n    const summaryData = JSON.parse(sessionStorage.getItem(\"summaryData\"));\n    const countryData = summaryData.Countries.find(\n      (countryStats) => countryStats.Country === country\n    );\n\n    const { TotalConfirmed, TotalRecovered, TotalDeaths } = countryData;\n\n    currentChart = new Chart(cvs, {\n      type: \"bar\",\n      data: {\n        labels: [\"Confirmed\", \"Recoverd\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"# of people\",\n            data: [TotalConfirmed, TotalRecovered, TotalDeaths],\n            backgroundColor: [\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(134, 252, 114, 0.2)\",\n              \"rgba(255, 99, 132, 0.2)\",\n            ],\n            borderColor: [\n              \"rgba(54, 162, 235, 1)\",\n              \"rgba(134, 252, 114, 1)\",\n              \"rgba(255, 99, 132, 1)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        layout: {\n          padding: {\n            left: 25,\n            right: 25,\n          },\n        },\n      },\n    });\n  };\n\n  // On each re-render destroy the chart and repaint it\n  useEffect(() => {\n    if (typeof currentChart !== \"undefined\") {\n      currentChart.destroy();\n    }\n    if (JSON.stringify(data) !== \"[]\") {\n      createChart(data);\n    }\n  });\n\n  return <canvas ref={chartRef} className=\"ctx\"></canvas>;\n};\n","import React, { useRef, useEffect, useState } from \"react\";\nimport \"./Dropdown.css\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nexport default ({ options, setCountry }) => {\n  const [disabled, setDisabled] = useState(false);\n\n  const selectRef = useRef();\n  useEffect(() => {\n    selectRef.current.disabled = disabled;\n  }, [disabled]);\n\n  return (\n    <>\n      <select\n        ref={selectRef}\n        className=\"dropdown\"\n        type=\"text\"\n        onChange={(e) => {\n          //Find the corresponding option element with this country\n          const elem = options.find(\n            (element) => element.country === e.target.value\n          );\n          //Set a timeout event that change the country state after 3.5 sec\n          // setCountry(elem.slug);\n          console.log(elem.slug);\n          setDisabled(true);\n\n          setTimeout(() => {\n            setCountry(elem.slug);\n            setDisabled(false);\n          }, 3500);\n        }}\n      >\n        {options.map((opt, idx) => {\n          return (\n            <option value={opt.country} key={idx}>\n              {opt.country}\n            </option>\n          );\n        })}\n      </select>\n      {disabled ? <CircularProgress /> : null}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  boxStyles: {\n    // width: \"100%\",\n    padding: \"1em 0em 0 0\",\n    margin: \"0em 144px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n\n  cardStyles: {\n    width: \"325px\",\n    height: \"100px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"rgba(255, 255, 255, 0.8)\",\n    fontSize: \"18px\",\n  },\n  confirmedCard: {\n    border: \"1px solid rgba(54, 162, 235, 0.5)\",\n    backgroundColor: \"rgba(54, 162, 235, 0.5)\",\n  },\n  recoveredCard: {\n    border: \"1px solid rgba(134, 252, 114, 0.5)\",\n    backgroundColor: \"rgba(134, 252, 114, 0.5)\",\n  },\n  deathsCard: {\n    border: \"1px solid rgba(255, 99, 132, 0.5)\",\n    backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n  },\n});\n\nexport default ({ summaryData }) => {\n  const classes = useStyles();\n\n  const { TotalConfirmed, TotalDeaths, TotalRecovered } = summaryData.Global;\n\n  return (\n    <Box className={classes.boxStyles}>\n      <Card className={[classes.cardStyles, classes.confirmedCard]}>\n        <CardContent>\n          <Typography variant=\"h4\">{TotalConfirmed}</Typography>\n          <Typography display=\"inline\">Confirmed Cases Worldwide</Typography>\n        </CardContent>\n      </Card>\n      <Card className={[classes.cardStyles, classes.recoveredCard]}>\n        <CardContent>\n          <Typography variant=\"h4\">{TotalRecovered}</Typography>\n          <Typography display=\"inline\">Recovered Cases Worldwide</Typography>\n        </CardContent>\n      </Card>\n      <Card className={[classes.cardStyles, classes.deathsCard]}>\n        <CardContent>\n          <Typography variant=\"h4\">{TotalDeaths}</Typography>\n          <Typography display=\"inline\">Deaths Worldwide</Typography>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  boxStyles: {\n    // width: \"100%\",\n    padding: \"1em 0em 2em 0\",\n    margin: \"0em 144px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n\n  cardStyles: {\n    backgroundColor: \"rgba(0,0,0,0.2)\",\n    width: \"325px\",\n    height: \"150px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"rgba(255, 255, 255, 0.8)\",\n    fontSize: \"18px\",\n  },\n  confirmedCard: {\n    border: \"1px solid rgba(54, 162, 235, 0.5)\",\n  },\n  recoveredCard: {\n    border: \"1px solid rgba(134, 252, 114, 0.5)\",\n  },\n  deathsCard: {\n    border: \"1px solid rgba(255, 99, 132, 0.5)\",\n  },\n});\n\nexport default ({ summaryData, country }) => {\n  const classes = useStyles();\n\n  //\n  if (country === undefined) {\n    return <></>;\n  }\n  const countryData = summaryData.Countries.find(\n    (cData) => cData.Slug === country\n  );\n\n  const { TotalConfirmed, TotalDeaths, TotalRecovered } = countryData;\n\n  return (\n    <Box className={classes.boxStyles}>\n      <Card className={[classes.cardStyles, classes.confirmedCard]}>\n        <CardContent>\n          <Typography variant=\"h4\">{TotalConfirmed}</Typography>\n          <Typography display=\"inline\">\n            Confirmed Cases in {countryData.Country}\n          </Typography>\n        </CardContent>\n      </Card>\n      <Card className={[classes.cardStyles, classes.recoveredCard]}>\n        <CardContent>\n          <Typography variant=\"h4\">{TotalRecovered}</Typography>\n          <Typography display=\"inline\">\n            Recovered Cases in {countryData.Country}\n          </Typography>\n        </CardContent>\n      </Card>\n      <Card className={[classes.cardStyles, classes.deathsCard]}>\n        <CardContent>\n          <Typography variant=\"h4\">{TotalDeaths}</Typography>\n          <Typography display=\"inline\">\n            Deaths in {countryData.Country}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n","// Base URI that can be concatenated to create more complex queries\nconst BASE_URL = \"https://api.covid19api.com\";\n\nconst getSummaryData = async () => {\n  const url = `${BASE_URL}/summary`;\n  let data;\n\n  if (sessionStorage.getItem(\"summaryData\")) {\n    data = JSON.parse(sessionStorage.getItem(\"summaryData\"));\n  } else {\n    data = await (await fetch(url)).json();\n    sessionStorage.setItem(\"summaryData\", JSON.stringify(data));\n  }\n  return data;\n};\n\nconst getAllCountriesAndCode = (summaryData) => {\n  const mapping = summaryData.Countries.map((country) => {\n    return { country: country.Country, slug: country.Slug };\n  });\n\n  return mapping;\n};\n\n// Returns an array of all the api calls for this country and dates\n// @param country - the country <string>\n// @param dates - array of date objects\nconst getConfirmedCasesByCountry = async (country, dates) => {\n  // Await the promise.all and convert each json() promise to extract the data\n  const temp = await Promise.all(\n    dates.slice(-8, dates.length).map(async (date) => {\n      // console.log(date);\n      //Set the nextDate to be the next day\n      const nextDate = new Date(date);\n      nextDate.setDate(date.getDate() + 1);\n\n      // Api url\n      const url = `${BASE_URL}/total/country/${country}/status/confirmed?from=${date.toISOString()}&to=${nextDate.toISOString()}`;\n      // console.log(url);\n      const data = await fetch(url).then((res) => res.json()); // We want to await the response and send out another promise with json()\n      return data;\n    })\n  );\n  // console.log(temp);\n  return temp;\n};\n\n// This method returns an array of dates from all the months between the startDate and endDate inclusively\nconst getAllDatesInRange = (endDate) => {\n  const temp = new Date(endDate);\n  temp.setDate(temp.getDate() - 3);\n  const listOfDates = [temp];\n  const currentDate = new Date(temp);\n\n  //We want to set the date to the first day of each month\n  // Must format everything into UTC format\n  currentDate.setUTCDate(1);\n  currentDate.setUTCHours(0);\n  currentDate.setUTCMinutes(0);\n  currentDate.setUTCSeconds(0);\n  for (let i = 0; i < 7; i++) {\n    console.log(currentDate);\n    //Update the date and append it into the array\n    if (currentDate.toISOString() !== endDate.toISOString()) {\n      listOfDates.push(new Date(currentDate));\n    }\n    currentDate.setUTCHours(0);\n    currentDate.setUTCMonth(currentDate.getUTCMonth() - 1);\n  }\n  console.log(listOfDates);\n  return [...listOfDates].reverse();\n};\n\nexport {\n  getAllDatesInRange,\n  getConfirmedCasesByCountry,\n  getAllCountriesAndCode,\n  getSummaryData,\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./components/Charts/LineChart\";\nimport BarChart from \"./components/Charts/BarChart\";\nimport Dropdown from \"./components/Dropdown/Dropdown\";\nimport WorldwideStats from \"./components/Cards/WorldwideStats\";\nimport CountryCards from \"./components/Cards/CountryCards\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  getAllDatesInRange,\n  getConfirmedCasesByCountry,\n  getAllCountriesAndCode,\n  getSummaryData,\n} from \"./api/Api.js\";\n\nconst useStyles = makeStyles({\n  dropdownContainerStyles: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"0 144px\",\n    padding: \"1em 0em 0em 0em\",\n  },\n  titleStyles: {\n    padding: \"0.5em 144px 0 144px \",\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  // State declaration for country and data\n  const [summaryData, setSummaryData] = useState({});\n  const [isSummaryLoaded, setIsSummaryLoaded] = useState(false);\n  const [country, setCountry] = useState(undefined);\n  const [data, setData] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    const wrapperFunc = async () => {\n      setSummaryData(await getSummaryData());\n      setIsSummaryLoaded(true);\n      setCountry(\"afghanistan\");\n    };\n    wrapperFunc();\n  }, []);\n\n  useEffect(() => {\n    if (isSummaryLoaded) {\n      // setOptions(getAllCountriesAndCode(summaryData));\n      // setCountry(\"afghanistan\");\n    }\n  }, [isSummaryLoaded]);\n\n  // Only run this hook if the country state changes\n  useEffect(() => {\n    const wrapperFunc = async () => {\n      const now = new Date();\n      const dates = getAllDatesInRange(now);\n      setData(await getConfirmedCasesByCountry(country, dates));\n    };\n    if (isSummaryLoaded) {\n      wrapperFunc();\n    }\n  }, [country]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {isSummaryLoaded ? (\n          <>\n            <Typography variant=\"h5\" className={classes.titleStyles}>\n              Covid-19 Tracking Application\n            </Typography>\n            <WorldwideStats summaryData={summaryData} />\n            <Typography variant=\"caption\">\n              Updated as of {summaryData.Date}\n            </Typography>\n            <Box className={classes.dropdownContainerStyles}>\n              <Typography variant=\"body1\">Please select a country: </Typography>\n              <Dropdown\n                options={getAllCountriesAndCode(summaryData)}\n                setCountry={setCountry}\n                setDisabled={setDisabled}\n                disabled={disabled}\n              />\n            </Box>\n\n            <CountryCards summaryData={summaryData} country={country} />\n            <div className=\"flexbox\">\n              <LineChart data={data} />\n              <BarChart data={data} />\n            </div>\n          </>\n        ) : null}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}